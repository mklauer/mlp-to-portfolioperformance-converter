#!/usr/bin/python3
# -*- coding: utf-8 -*-

"""MLP to Portfolio Performance Converter

Input:  A CSV file generated by exporting transaction data from an MLP bank account.
Output: A CSV file that can be imported by Portfolio Performance.
"""

import argparse  # command line arguments parser
import csv
import fileinput
import locale
import os
import re
import sys

from memo_processor import MemoProcessor

CATEGORY_TO_TYPE = {
    "Zinseinkünfte": "Zinsen",
    "Quellensteuern:Kapitalertragsteuer": "Steuern",
    "Quellensteuern:Solidaritätszuschlag": "Steuern",
}


def opening_hook_csv(filename, mode):
    """CSV opening hook for the fileinput.input() function."""
    return open(filename, mode, newline="", encoding="iso-8859-1")


def print_message(text, color_code):
    """Print a colored message to stdout"""
    print(f"\033[{color_code}m{text}\033[0m")


def convert_to_german_number(number_string):
    """Convert English number string to German format"""
    pattern = r"^-*[,\d]+\.\d{2}$"
    if re.match(pattern, number_string):
        number = float(number_string.replace(",", ""))
        locale.setlocale(locale.LC_ALL, "de_DE")
        return locale.format_string("%.2f", number, grouping=True)
    return number_string


def is_positive(german_number_string):
    return not german_number_string.strip().startswith("-")


def search_header(csv_file):
    """Search for header in the CSV file"""
    header_line_no = 0
    found_header = None

    for line in csv_file:
        header_line_no += 1
        line = line.strip().replace('"', "").split(";")
        if "Buchungstag" in line and "Umsatz" in line:
            found_header = line
            break
        if header_line_no >= 20:
            print_message("Error: Header not found in the first 20 lines", 31)
            sys.exit(1)

    if found_header is None:
        print_message("Error: Header not found in the file", 31)
        sys.exit(1)

    return found_header, header_line_no


def process_transactions(transaction_reader, transaction_writer, header_offset):
    """Process transactions and write to output file"""
    rows_written = 0
    rows_read = header_offset
    for row in transaction_reader:
        rows_read += 1

        # Skip saldo lines
        if row.get("Kundenreferenz") in ["Anfangssaldo", "Endsaldo"]:
            continue

        umsatz = convert_to_german_number(row["Umsatz"])
        out_dict = {
            "Datum": row["Buchungstag"],
            "Wert": umsatz,
            "Buchungswährung": "EUR",
        }

        subject_str = row["Vorgang/Verwendungszweck"]
        memo_processor = MemoProcessor(subject_str, rows_read, is_positive(umsatz))

        type = CATEGORY_TO_TYPE.get(row.get("Category"))
        if type is not None:
            out_dict["Typ"] = type
            out_dict["Notiz"] = memo_processor.note
        else:
            processed_dict = memo_processor.process()

            if processed_dict == {}:
                processed_dict["Typ"] = "Einlage" if is_positive(umsatz) else "Entnahme"
                processed_dict["Notiz"] = memo_processor.note

            out_dict.update(processed_dict)

        transaction_writer.writerow(out_dict)
        rows_written += 1

    return rows_written


def main():
    """Main function"""
    arg_parser = argparse.ArgumentParser()
    arg_parser.add_argument("infile", help="Input CSV file from MLP bank")
    arg_parser.add_argument(
        "-o", "--outfile", help="Name of the converted output CSV file"
    )
    command_args = arg_parser.parse_args()

    input_file = command_args.infile
    if not os.path.exists(input_file):
        print_message(f'Error: Input file "{input_file}" does not exist', 31)
        sys.exit(1)

    output_file = (
        command_args.outfile
        if command_args.outfile
        else f"{os.path.splitext(input_file)[0]}_converted.csv"
    )

    csv_input = fileinput.input(files=input_file, mode="r", openhook=opening_hook_csv)
    header, header_offset = search_header(csv_input)
    transaction_reader = csv.DictReader(
        csv_input, fieldnames=header, delimiter=";", quotechar='"'
    )

    field_names = [
        "Datum",
        "Typ",
        "Wert",
        "Buchungswährung",
        "Steuern",
        "Stück",
        "ISIN",
        "WKN",
        "Ticker-Symbol",
        "Wertpapiername",
        "Notiz",
    ]
    csv_output = open(output_file, "w", newline="")
    transaction_writer = csv.DictWriter(
        csv_output, fieldnames=field_names, delimiter=";"
    )
    transaction_writer.writeheader()

    row_cnt = process_transactions(
        transaction_reader, transaction_writer, header_offset
    )

    print_message(f"Success: Converted {row_cnt} transactions", 32)
    print_message(f"Info: Result written to {output_file}", 0)

    csv_input.close()
    csv_output.close()


if __name__ == "__main__":
    main()
