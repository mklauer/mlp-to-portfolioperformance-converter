#!/usr/bin/python3
# -*- coding: utf-8 -*-

""" MLP to Portfolio Performance Converter

Input:  A CSV file generated by exporting transaction data from an MLP bank account.
Output: A CSV file that can be imported by Portfolio Performance.
"""

import argparse  # command line arguments parser
import csv
import fileinput
import os
import sys

from memo_processor import MemoProcessor

"""
Function definitions
"""


def opening_hook_csv(filename, mode):
    """CSV opening hook for the fileinput.input() function.

    Opens the file with the given name and mode and returns the file pointer.
    It uses the universal newline mode returning any newline unchanged to the
    caller which is most suitable for CSV files.
    The encoding is fixed to the file encoding delivered my the MLP export.
    """
    return open(filename, mode, newline='', encoding='iso-8859-1')


def print_error(text):
    """Print a red colored error text to stdout"""
    print('\033[31mError: ' + text + '\033[0m')


def print_success(text):
    """Print a green colored success message to stdout"""
    print('\033[32mSuccess: ' + text + '\033[0m')


def print_info(text):
    """Print an info message to stdout"""
    print('Info: ' + text)


"""
Main program
"""

if __name__ == '__main__':
    # Define and parse command line arguments
    argParser = argparse.ArgumentParser()
    argParser.add_argument("infile",
                           help="Input CSV file from MLP bank")
    argParser.add_argument("-o", "--outfile",
                           help="Name of the converted ouput CSV file")
    argParser.add_argument("-s", "--skip-lines",
                           help="Number of header lines to skip in input file",
                           type=int,
                           default=12)
    commandArgs = argParser.parse_args()

    # Check wheter input file exists
    inputFile = commandArgs.infile
    if not os.path.exists(inputFile):
        print_error("Input file \"" + inputFile + "\" does not exist")
        sys.exit(1)
    # Number of lines to skip. The first line after skipping should contain the
    # column headers aka field names.
    numSkipLines = commandArgs.skip_lines
    if numSkipLines < 0:
        print_error("SKIP_LINES must not be negative. Found: " + str(numSkipLines))
        sys.exit(1)
    # Name of converted output file
    if commandArgs.outfile is None:
        infileBase, infileExt = os.path.splitext(inputFile)
        outputFile = infileBase + "_converted" + infileExt
    else:
        outputFile = commandArgs.outfile

    # Open the input file and skip header lines. We use the fileinput module here
    # because it provides a function to get the current line number in the file.
    csvInput = fileinput.input(files=inputFile, mode='r', openhook=opening_hook_csv)
    for foo in range(numSkipLines):
        next(csvInput)

    # Open the output file
    csvOutput = open(outputFile, 'w', newline='')

    # Read the CSV file as Dictionary. The first line contains the field names
    # defining the keys of the Dictionary.
    transactionReader = csv.DictReader(csvInput, delimiter=';', quotechar='"')

    # Create the CSV writer for the ouput file and write the header line
    fieldNames = ['Datum', 'Typ', 'Wert', 'Buchungswährung', 'Steuern', 'Stück', 'ISIN', 'WKN', 'Ticker-Symbol',
                  'Wertpapiername', 'Notiz']
    transactionWriter = csv.DictWriter(csvOutput, fieldnames=fieldNames, delimiter=';')
    transactionWriter.writeheader()

    rowCnt = 0
    for row in transactionReader:
        # Create output dictionary and set values that are independent of the
        # transaction type.
        # noinspection PyTypeChecker
        outDict = {'Datum': row['Valuta'], 'Wert': row['Umsatz'], 'Buchungswährung': 'EUR'}

        transactionIsValid = True

        # noinspection PyTypeChecker
        subjectStr = row['Vorgang/Verwendungszweck']
        input_file_line_no = str(csvInput.filelineno() + 1)
        memo_processor = MemoProcessor(subjectStr, input_file_line_no)

        processed_dict = memo_processor.process()

        # noinspection PyTypeChecker
        if processed_dict != {}:
            outDict.update(processed_dict)
        elif (row['Kundenreferenz'] == 'Anfangssaldo' or
              row['Kundenreferenz'] == 'Endsaldo'):
            # We ignore rows containing the opening and end balance as they
            # cannot be imported to PortfolioPerformance in any meaningful way
            transactionIsValid = False

        else:
            memo_processor.print_warning("Unknown transaction type in line ")
            transactionIsValid = False

        # Write out the converted row
        if transactionIsValid:
            transactionWriter.writerow(outDict)
            rowCnt += 1

    print_success("Converted " + str(rowCnt) + " transactions")
    print_info("Result written to " + outputFile)

    # Close the files
    csvInput.close()
    csvOutput.close()
